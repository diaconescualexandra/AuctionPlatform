package Model;

import java.sql.*;
import java.util.ArrayList;

public class Auction {

    private int idAuction;
    private Item item;
    private ArrayList<Bid> bids ;
    private boolean isOpen;
    private String deadline;
    private double minBid;
    private User user;


    public boolean isOpen() {
        return isOpen;
    }

    public Auction(Item item, ArrayList<Bid> Bids, boolean isOpen, String deadline, int minBid, User user) {
        this.item = item;
        this.bids = Bids;
        this.isOpen = isOpen;
        this.deadline = deadline;
        this.minBid = minBid;
        this.user = user;
    }

    public Auction(Item item, User user) {
        this(item, new ArrayList<>(), true, "", 0, user );
    }

    public void setDeadline(String deadline) {
        this.deadline = deadline;
    }

    public ArrayList<Bid> getBids() {
        return bids;
    }

    public void setMinBid(int minBid) {
        this.minBid = minBid;
    }

    @Override
    public String toString() {
        return "Auction{" +
                "item=" + item.getTitle() +
                ", isOpen=" + isOpen +
                ", deadline='" + deadline + '\'' +
                ", minimumBid=" + minBid +
                '}';
    }



    public Item getItem() {return item;}

    public void setOpen(boolean open) {
        isOpen = open;
    }

    public void setItem(Item item) {
        this.item = item;
    }

    public void placeBid(double amount, User bidder, Item item) {
        if (!isOpen) {
            System.out.println("Auction is closed. Bids can't be placed!");
            return;
        }

        if (amount > minBid ) {
            bids.add(new Bid(amount, bidder, item));
            System.out.println("Bid placed successfully");
            if (amount < minBid) {
                minBid = amount;
            }
        } else {
            System.out.println("Your bid must be higher than the current lowest bid and meet the minimum bid requirement.");
        }
    }

    public double getLowestBid() {
        return minBid;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void closeAuction ( Item item) {
        if ( this.isOpen())
        { this.setOpen(false);
            System.out.println("Auction was closed");}
        else {
            System.out.println("Auction is already closed!");}
    }



    public void createAuction(Connection con, Item item, User user, String deadline, int minBid) throws SQLException {

        // Modify the query to not include auctionId as it will be auto-generated
        String query = "INSERT INTO auctions (isOpen, deadline, minBid, userId, itemId) VALUES (?, ?, ?, ?, ?)";

        if (item.getItemId() != 0) {
            try (PreparedStatement pstm = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                // Set the values for the PreparedStatement
                pstm.setBoolean(1, isOpen());  // Assuming isOpen() returns a boolean
                pstm.setString(2, deadline);   // Use the passed deadline parameter
                pstm.setDouble(3, minBid);     // Use the passed minBid parameter
                pstm.setInt(4, user.getIdUser());  // Use the user ID from the User object
                pstm.setInt(5, item.getItemId());  // Use the item ID from the Item object

                // Execute the update
                pstm.executeUpdate();

                // Retrieve the generated auctionId (auto-generated by the database)
                ResultSet generatedKeys = pstm.getGeneratedKeys();
                if (generatedKeys.next()) {
                    idAuction = generatedKeys.getInt(1); // Get the generated auction ID
                } else {
                    throw new SQLException("Failed to retrieve the generated ID for auction.");
                }

            }
            System.out.println("Auction created successfully by " + user.getUsername());
        } else {
            System.out.println("Cannot create auction, item is empty!");
        }
    }


    public void readAuction (Connection con, int id) throws SQLException {
        String query = "select * from auctions where auctionId = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1,id);
            try (ResultSet rs = stmt.executeQuery())
            {
                if(rs.next()) {
                    this.idAuction = id;
                    this.minBid = rs.getInt("minBid");
                    this.deadline = rs.getString("deadline");
                    this.isOpen = rs.getBoolean("isOpen");
                }
            }
        }
    }

    public void updateAuction (Connection con, double minBid, String deadline, boolean isOpen, int idAuction) throws SQLException {
        try {
            String query = "update auctions set minBid = ?, deadline = ?, isOpen = ? where auctionId = ?";
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.setDouble(1, minBid);
            stmt.setString(2,deadline);
            stmt.setBoolean(3,isOpen);
            stmt.setInt(4,idAuction);
            stmt.executeUpdate();
        } catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public void deleteAuction(Connection con, int id){
        try {
            String query = "delete from auctions where auctionId=?";
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.setInt(1,id);
            stmt.executeUpdate();
        }catch(Exception e)
        {e.printStackTrace();}
    }



    public String getDeadline() {
        return deadline;
    }

    public double getMinBid() {
        return minBid;
    }

    public int getIdAuction() {
        return idAuction;
    }
}


